#!/bin/bash
ASCII_ART_NAME="MacOS"
OUTPUT_IPV6=false
os_type=$(uname)
user=$(whoami)
date=$(date)
toilet -d /opt/homebrew/share/figlet/fonts -f standard -F metal $ASCII_ART_NAME
echo "Welcome, ${user}. It's currently ${date}"

# TODO add 2 functions for boardtemp and batteryinfo as hardware information
#
#

# Display function
function display() {
	# $1=name $2=value $3=red_limit $4=minimal_show_limit $5=unit $6=after $7=acs/desc{
        # battery red color is opposite, lower number
        if [[ "$1" == "Battery" ]]; then local great="<"; else local great=">"; fi
        if [[ -n "$2" && "$2" -gt "0" && (( "${2%.*}" -ge "$4" )) ]]; then
                printf "%-14s" "$1:"
                if awk "BEGIN{exit ! ($2 $great $3)}"; then
			printf "\x1B[0;91m%s" " $2"
		else
			printf "\x1B[0;92m%s" " $2"
		fi
                printf "%-1s\x1B[0m" "$5"
                printf "%-11s\t" "$6"
                return 1
        fi
} # display
function get_ip_addresses() {
    ipv4s=$(ifconfig | awk '/inet / && $2 != "127.0.0.1" {print $2}')
    ipv6s=$(ifconfig | awk '/inet6 / && !/::1/ && !/fe80::/ {print $2}')
    ipv4s_line=$(echo "$ipv4s" | paste -sd "," -)
    ipv6s_line=$(echo "$ipv6s" | paste -sd "," -)
		if [ "$OUTPUT_IPV6" = false ]; then
				echo "${ipv4s_line}"
		else
				echo "V4[${ipv4s_line}],V6[${ipv6s_line}]"
		fi
}
STORAGE=/dev/sda1
function storage_info() {
        # storage info
	root_info=$(df -h /)
	if [[ "$os_type" == "Darwin" ]]; then
		root_usage=$(awk '/\// {print $(NF-4)}' <<<${root_info} | sed 's/%//g')
		root_total=$(awk '/\// {print $(NF-7)}' <<<${root_info} | sed 's/i//g')
	else
        	root_usage=$(awk '/\// {print $(NF-1)}' <<<${root_info} | sed 's/%//g')
        	root_total=$(awk '/\// {print $(NF-4)}' <<<${root_info})
	fi
        storage_info=$(df -h $STORAGE 2>/dev/null | grep $STORAGE)
        if [[ -n "${storage_info}" && ${root_info} != *$STORAGE* ]]; then
                storage_usage=$(awk '/\// {print $(NF-1)}' <<<${storage_info} | sed 's/%//g')
                storage_total=$(awk '/\// {print $(NF-4)}' <<<${storage_info})
                if [[ -n "$(command -v smartctl)" ]]; then
                        DISK="${STORAGE::-1}"
                        storage_temp+=$(smartctl -l scttempsts $DISK 2> /dev/null | grep -i 'Current Temperature:' | awk '{print $(NF-1)}')
                fi
        fi
} # storage_info
# Get root_info and storage_info(if exists)
storage_info



# Display IP
ip_address=$(get_ip_addresses)
printf "IP:            "
printf "\x1B[92m%s\x1B[0m" "$ip_address"
echo "" # fixed newline
# Display root storage usage
display "Usage of /" "$root_usage" "90" "1" "%" " of $root_total"



declare -a services=(
"com.google.Chrome"
"com.openai.chat"
"com.microsoft.team"
"com.nssurge.surge-mac"
"com.docker"
"mysql" # homebrew.mxcl.mysql@8.0 for brew service start
)


declare -a serviceNames=(
"Chrome"
"ChatGPT"
"Teams"
"Surge"
"Docker"
"MySQL"
)

declare -a serviceStatus=()

# Get status of all my services
# change name incase of status in zsh
for service in "${services[@]}"
do
	active_status=`launchctl list | grep "$service"`
	if [[ ! -z $active_status ]]; then
		serviceStatus+=("active")
	else
		serviceStatus+=("inactive")
	fi
done

# Maximum column width
#width=$((49-2))
width=70

# Current line and line length
line="  "
lineLen=0

echo ""
echo "Services running:"

for i in ${!serviceStatus[@]}
do
	# Next line and next line length
	next=" ${serviceNames[$i]}: \e[5m${serviceStatus[$i]}"
	nextLen=$((1+${#next}))

	# If the current line will exceed the max column with then echo the current line and start a new line
	if [[ $((lineLen+nextLen)) -gt width ]]; then
	printf "$line\n"
	lineLen=0
	line="  "
	fi

	lineLen=$((lineLen+nextLen))

	# Color the next line green if it's active, else red
	if [[ "${serviceStatus[$i]}" == "active" ]]; then
	line+="\e[32m\e[0m${serviceNames[$i]}: \e[32m● ${serviceStatus[$i]}\e[0m "
	else
	line+="${serviceNames[$i]}: \e[31m▲ ${serviceStatus[$i]}\e[0m "
	fi
done

# echo what is left
printf "$line\n"

